(* ::Package:: *)

Begin["SMML`Tokenizer`"];

preOperator="$"|"";
postOperator="``"|"`"|"";
volOperator=(">"|":")...;
pitOperator=("#"|"b"|"'"|",")...;
durOperator=("."|"-"|"_"|"=")...;
scaleDegree="0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"%"|"x";

number=integer~~""|("."~~unsigned);
expression=(integer~~""|("/"|"."~~unsigned))|("log2("~~unsigned~~")");
string=Except[WhitespaceCharacter|"("|")"|"{"|"}"|"["|"]"|"<"|">"]..;
subtrack=Nest[(("{"~~#~~"}")|Except["{"|"}"])...&,Except["{"|"}"]...,8];
argument=rep[expression|number|string|("{"~~subtrack~~"}")];

(* notation *)
orderList=""|rep[unsigned~~""|("~"~~unsigned)];
orderTok=Union@@StringCases[#,{
	n:integer~~"~"~~m:integer:>Range[ToExpression@n,ToExpression@m],
	n:integer:>{ToExpression@n}
}]&;
notationPatt=("/"~~orderList~~":")|"|"|"/"|"^"|"&"|"*"|Whitespace;
notationTok=StringCases[{
	bl:"/"~~ol:orderList~~":":>
		{"Type"->"BarLine","Newline"->(bl=="\\"),"Skip"->False,"Order"->orderTok[ol]},
	bl:"|"|"/":>
		{"Type"->"BarLine","Newline"->(bl=="\\"),"Skip"->(bl=="/"),"Order"->{0}},
	"^":>{"Type"->"Tie"},
	"&":>{"Type"->"PedalPress"},
	"*":>{"Type"->"PedalRelease"},
	space:Whitespace:>{"Type"->"Whitespace","Content"->space}
}];

TrackTokenize[syntax_]:=Module[
	{
		chordNotation,chordOperator,
		pitch,pitches,note,pitchTok,
		objectPatt,objectTok,objPadded,
		funcName,functionPatt,functionTok,
		trackTok
	},
	
	chordNotation=""|Alternatives@@syntax[["ChordNotation"]];
	chordOperator=Alternatives@@syntax[["ChordOperator"]];
	pitch=scaleDegree~~pitOperator~~chordNotation~~chordOperator...;
	pitches="["~~pitch..~~"]"~~pitOperator;
	note=preOperator~~pitch|pitches~~volOperator~~durOperator~~postOperator;
	pitchTok=StringCases[
		StringExpression[
			sd:scaleDegree,
			po:pitOperator,
			cn:chordNotation,
			co:chordOperator
		]:>{
			"ScaleDegree"->sd,
			"PitchOperators"->po,
			"ChordNotations"->cn,
			"ChordOperators"->co
		}
	];
	
	(* object *)
	objectPatt=("{"~~""|(unsigned~~"*")~~subtrack~~"}")|note;
	objectTok=StringCases[{
		"{"~~n:unsigned~~"*"~~sub:subtrack~~"}":>
			{"Type"->"Subtrack","Content"->trackTok[sub],"Repeat"->-ToExpression@n},
		"{"~~sub:subtrack~~"}":>
			{"Type"->"Subtrack","Content"->trackTok[sub],"Repeat"->Max[-1,
				StringCases[sub,"/"~~i:orderList~~":":>orderTok[i]]
			]},
		StringExpression[
			pre:preOperator,
			""|"["~~pts:pitch..~~"]"|"",
			pit:pitOperator,
			vol:volOperator,
			dur:durOperator,
			pst:postOperator
		]:>{
			"Type"->"Note",
			"Pitches"->pitchTok[pts],
			"PitchOperators"->pit,
			"DurationOperators"->dur,
			"VolumeOperators"->vol,
			"Staccato"->StringCount[pst,"`"],
			"Arpeggio"->StringContainsQ[pre,"$"]
		}
	}];
	
	(* function *)
	funcName=Alternatives@@syntax[["FunctionList"]];
	objPadded=notationPatt...~~objectPatt~~notationPatt...;
	functionPatt=Alternatives[
		"("~~funcName~~":"~~rep[expression]~~")",
		"("~~expression~~"%)",
		"("~~unsigned~~"/"~~unsigned~~")",
		"("~~NumberString~~")",
		"(1="~~string~~("'"|",")...~~")",
		objPadded~~"~"~~objPadded,
		objPadded~~"("~~unsigned~~"=)"~~objPadded,
		"("~~unsigned~~"-)"~~objPadded,
		"("~~note..~~"^)"~~objPadded,
		objPadded~~"(^"~~note..~~")",
		"("~~unsigned~~"~)"~~objPadded
	];
	functionTok=StringCases[{
		"("~~fn:funcName~~":"~~ag:rep[expression]~~")":>{
			"Type"->"FUNCTION",
			"Name"->fn,
			"Simplified"->True,
			"Argument"->({"Type"->"Expression","Content"->#}&)/@StringSplit[ag,","]
		},
		"("~~vol:expression~~"%)":>{
			"Type"->"FUNCTION",
			"Name"->"Vol",
			"Simplified"->True,
			"Argument"->{{"Type"->"Expression","Content"->vol}}
		},
		"("~~bar:unsigned~~"/"~~beat:unsigned~~")":>{
			"Type"->"FUNCTION",
			"Name"->"BarBeat",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Expression","Content"->bar},
				{"Type"->"Expression","Content"->beat}
			}
		},
		"("~~spd:number~~")":>{
			"Type"->"FUNCTION",
			"Name"->"Spd",
			"Simplified"->True,
			"Argument"->{{"Type"->"Expression","Content"->spd}}
		},
		"(1="~~key:string~~")":>{
			"Type"->"FUNCTION",
			"Name"->"KeyOct",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"String","Content"->key}
			}
		},
		objL:objPadded~~"~"~~objR:objPadded:>{
			"Type"->"FUNCTION",
			"Name"->"Portamento",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Subtrack","Content"->trackTok[objL],"Repeat"->-1},
				{"Type"->"Subtrack","Content"->trackTok[objR],"Repeat"->-1}
			}
		},
		objL:objPadded~~"("~~arg:unsigned~~"=)"~~objR:objPadded:>{
			"Type"->"FUNCTION",
			"Name"->"Tremolo2",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Expression","Content"->arg},
				{"Type"->"Subtrack","Content"->trackTok[objL],"Repeat"->-1},
				{"Type"->"Subtrack","Content"->trackTok[objR],"Repeat"->-1}
			}
		},
		"("~~arg:unsigned~~"-)"~~objR:objPadded:>{
			"Type"->"FUNCTION",
			"Name"->"Tremolo1",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Expression","Content"->arg},
				{"Type"->"Subtrack","Content"->trackTok[objR],"Repeat"->-1}
			}
		},
		"("~~nl:note..~~"^)"~~objR:objPadded:>{
			"Type"->"FUNCTION",
			"Name"->"GraceNote",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Subtrack","Content"->trackTok[nl],"Repeat"->-1},
				{"Type"->"Subtrack","Content"->trackTok[objR],"Repeat"->-1}
			}
		},
		objL:objPadded~~"(^"~~nl:note..~~")":>{
			"Type"->"FUNCTION",
			"Name"->"Appoggiatura",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Subtrack","Content"->trackTok[objL],"Repeat"->-1},
				{"Type"->"Subtrack","Content"->trackTok[nl],"Repeat"->-1}
			}
		},
		"("~~arg:unsigned~~"~)"~~"{"~~trkR:subtrack~~"}":>{
			"Type"->"FUNCTION",
			"Name"->"Tuplet",
			"Simplified"->True,
			"Argument"->{
				{"Type"->"Expression","Content"->arg},
				{"Type"->"Subtrack","Content"->trackTok[trkR],"Repeat"->-1}
			}
		}
	}]&;
	
	trackTok=StringCases[{
		func:functionPatt:>functionTok[func],
		objt:objectPatt:>objectTok[objt],
		nota:notationPatt:>notationTok[nota],
		und_:>{"Type"->"Undefined","Content"->und}
	}];
	
	Return[trackTok];
	
];

End[];

