(* ::Package:: *)

keyDictR=<|-2->"bB",-1->"B",0->"C",1->"#C",2->"D",3->"bE",4->"E",5->"F",6->"#F",7->"G",8->"#G",9->"A"|>;
schemes={
	FontSlant->ToExpression[#Slant],FontWeight->ToExpression[#Weight],FontColor->RGBColor[#Color]
}&@Association@#&/@#&/@Association/@Association@Import[localPath<>"Lib\\QYS\\Color.json"];


schemeList=Import[localPath<>"Lib\\Scheme\\","FileNames"];



detoken[tokenizer_,scheme_]:=Module[
	{
		argument,newline,
		tokBox,rowBox={},boxes={}
	},
	Do[
		newline=False;
		Switch[token[["Type"]],
			"FunctionToken",
				tokBox={StyleBox["\"<\"",scheme[["Function"]]]};
				argument=Association@token[["Argument"]];
				If[token[["Simplified"]]==True,
					Switch[Keys@argument,
						{"Key","Oct"},
							AppendTo[tokBox,StyleBox["\"1=\"",scheme[["FuncName"]]]];
							AppendTo[tokBox,StyleBox[Key[argument[["Key"]]][keyDictR],scheme[["FuncArg"]]]];
							AppendTo[tokBox,StyleBox[Switch[argument[["Oct"]],
								_?Positive,StringRepeat["'",argument[["Oct"]]],
								_?Negative,StringRepeat[",",-argument[["Oct"]]],
								0,""
							],scheme[["FuncArg"]]]],
						{"Bar","Beat"},
							AppendTo[tokBox,StyleBox[argument[["Bar"]],scheme[["FuncArg"]]]];
							AppendTo[tokBox,StyleBox["/",scheme[["FuncName"]]]];
							AppendTo[tokBox,StyleBox[argument[["Beat"]],scheme[["FuncArg"]]]],
						{"Instr","InstProp"},
							tokBox=tokBox~Join~Flatten@Riffle[Table[{
								StyleBox[argument[["Instr",i]],scheme[["FuncArg"]]],
								If[argument[["Volume",i]]!=1,{
									StyleBox["(",scheme[["FuncName"]]],
									StyleBox[argument[["Volume",i]],scheme[["FuncArg"]]],
									StyleBox[")",scheme[["FuncName"]]]
								},{Nothing}]},{i,Length@argument[["Instr"]]}],
							StyleBox[",",scheme[["Function"]]]],
						{"Volume"},
							AppendTo[tokBox,StyleBox[
								If[StringPart[#,-1]==".",#<>"0",#]&@ToString[#],scheme[["FuncArg"]]
							]&@argument[["Volume"]]],
						{"Instr"},
							tokBox=tokBox~Join~Riffle[
								StyleBox[#,scheme[["FuncArg"]]]&/@argument[["Instr"]],
							StyleBox[",",scheme[["Function"]]]],
						{"Speed"},
							AppendTo[tokBox,StyleBox[argument[["Speed"]],scheme[["FuncArg"]]]];
					],
					Do[
						AppendTo[tokBox,StyleBox[function,scheme[["FuncName"]]]];
						AppendTo[tokBox,StyleBox[":",scheme[["Function"]]]];
						Switch[function,
							"Chord"|"Instr",
								tokBox=tokBox~Join~Riffle[
									StyleBox[#,scheme[["FuncArg"]]]&/@argument[[function]],
								StyleBox[",",scheme[["Function"]]]],
							"Volume",
								AppendTo[tokBox,StyleBox[
									If[StringPart[#,-1]==".",#<>"0",#]&@ToString[#],scheme[["FuncArg"]]
								]&@argument[["Volume"]]],
							_,
								AppendTo[tokBox,StyleBox[argument[[function]],scheme[["FuncArg"]]]];
						],
					{function,Keys@argument}];
				];
				AppendTo[tokBox,StyleBox["\">\"",scheme[["Function"]]]],
			"Note",
				tokBox=TemplateBox[{
					StyleBox[Switch[#,-1,"%",10,"x",_,ToString[#]]&[#ScaleDegree],scheme[["Pitch"]]],
					StyleBox[Switch[#SemitonesCount,
						_?Positive,StringRepeat["#",#SemitonesCount],
						_?Negative,StringRepeat["b",-#SemitonesCount],
						0,"\"\""
					],scheme[["PitOp"]]],
					StyleBox[Switch[#OctavesCount,
						_?Positive,StringRepeat["'",#OctavesCount],
						_?Negative,StringRepeat[",",-#OctavesCount],
						0,"\"\""
					],scheme[["PitOp"]]],
					StyleBox["\""<>#ChordSymbol<>"\"",scheme[["PitOp"]]]
				},"RowDefault"]&/@Association/@token[["Pitches"]];
				If[token[["Arpeggio"]],tokBox=Insert[tokBox,StyleBox["^",scheme[["Chord"]]],-2]];
				If[Length@token[["Pitches"]]>1,
					PrependTo[tokBox,StyleBox["\"[\"",scheme[["Chord"]]]];
					AppendTo[tokBox,StyleBox["\"]\"",scheme[["Chord"]]]];
				];
				AppendTo[tokBox,StyleBox[Switch[token[["SemitonesCount"]],
					_?Positive,StringRepeat["#",token[["SemitonesCount"]]],
					_?Negative,StringRepeat["b",-token[["SemitonesCount"]]],
					0,"\"\""
				],scheme[["PitOp"]]]];
				AppendTo[tokBox,StyleBox[Switch[token[["OctavesCount"]],
					_?Positive,StringRepeat["'",token[["OctavesCount"]]],
					_?Negative,StringRepeat[",",-token[["OctavesCount"]]],
					0,"\"\""
				],scheme[["PitOp"]]]];
				AppendTo[tokBox,StyleBox["\""<>token[["DurationOperators"]]<>"\"",scheme[["DurOp"]]]];
				If[token[["Staccato"]],AppendTo[tokBox,StyleBox["`",scheme[["DurOp"]]]]],
			"BarLine",
				If[token[["Order"]]=!={0},
					tokBox=Riffle[If[Length[#]==1,
						StyleBox[ToString@#[[1]],scheme[["Order"]]],
						StyleBox[ToString@#[[1]]<>".."<>ToString@#[[-1]],scheme[["Order"]]]
					]&/@Replace[{a_,b_}:>Sequence[{a},{b}]]/@Split[token[["Order"]],#1+1==#2&],
					StyleBox[",",scheme[["BarLine"]]]];
					If[token[["Newline"]],
						newline=True;
						PrependTo[tokBox,StyleBox["\\",scheme[["BarLine"]]]],
						PrependTo[tokBox,StyleBox["\"/\"",scheme[["BarLine"]]]]
					];
					AppendTo[tokBox,StyleBox[":",scheme[["BarLine"]]]],
					Which[
						token[["Skip"]],
							tokBox={StyleBox["\"/\"",scheme[["BarLine"]]]},
						token[["Newline"]],
							tokBox={StyleBox["\\",scheme[["BarLine"]]]},
						True,
							tokBox={StyleBox["\"|\"",scheme[["BarLine"]]]}
					];	
				],
			"Tie",
				tokBox={StyleBox["\"^\"",scheme[["TransOp"]]]},
			"Portamento",
				tokBox={StyleBox["\"~\"",scheme[["TransOp"]]]},
			"Undefined",
				tokBox={StyleBox[token[["Content"]],scheme[["Undef"]]]},
			"Whitespace",
				tokBox={StyleBox[token[["Content"]]]}
		];
		AppendTo[rowBox,TemplateBox[tokBox,"RowDefault"]];
		If[newline,
			AppendTo[boxes,TemplateBox[rowBox,"RowDefault"]];
			rowBox={};
		],
	{token,Association/@tokenizer}];
	If[Length@rowBox!=0,AppendTo[boxes,TemplateBox[rowBox,"RowDefault"]]];
	Return[GridBox[{#}&/@boxes,DefaultBaseStyle->"Column"]];
];


qysDisplay[str_]:=qysDisplay[str,"Default"];
qysDisplay[str_,scheme_]:=Block[
	{schemeData,bgColor,fontStyle},
	schemeData=Association/@Association@Import[localPath<>"Lib\\Scheme\\Default.json"];
	fontStyle={
		FontSlant->ToExpression[#Slant],FontWeight->ToExpression[#Weight],FontColor->RGBColor[#Color]
	}&/@Association/@schemeData[["FontStyle"]];
	bgColor=RGBColor/@schemeData[["Background"]];
	Pane[
		Style[
			detoken[QYS`getTrack[str],fontStyle]//DisplayForm,
		LineBreakWithin->False],
		ImageSize->{400,300},Scrollbars->True,
		BaseStyle->Background->bgColor[["Default"]]
	]
];


(* ::Input:: *)
(*QYS`getTrack["/2:"]*)


(* ::Input:: *)
(*qysDisplay["<Chord:0,12>err~\\[1'm^2]b`\n<1.0>"]*)
