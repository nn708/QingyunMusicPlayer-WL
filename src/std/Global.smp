//SMML Standard Package - GlobalSettings
//Updated: 2018.2.16.

# Function

ConOct(octave, volumeScale = 1) {
    this.Settings.assignSetting('ConOct', octave, (octave) => Number.isInteger(octave))
    this.Settings.assignSetting('ConOctVolume', volumeScale, (volume) => volume >= 0)
}

Vol(volume) {
    /**** (!1\%) ****/
    this.Settings.assignSetting('Volume', volume / 100, (volume) => volume >= 0)
}

Spd(speed) {
    /**** (!1) ****/
    this.Settings.assignSetting('Speed', speed, (speed) => speed > 0)
}

Key(key) {
    this.Settings.assignSetting('Key', key, (key) => Number.isInteger(key))
}

Oct(oct) {
    /**** (Oct:!1) ****/
    this.Settings.assignSetting('Octave', oct, (octave) => Number.isInteger(octave))
}

KeyOct(keyOct) {
    /**** (1=$1) ****/
    let key, oct, splitIndex
    if (keyOct.endsWith('\'')) {
        splitIndex = keyOct.indexOf('\'')
        key = keyOct.slice(0, splitIndex)
        oct = keyOct.length - splitIndex + 1
    } else if (keyOct.endsWith(',')) {
        splitIndex = keyOct.indexOf('\'')
        key = keyOct.slice(0, splitIndex)
        oct = keyOct.length - splitIndex + 1
    } else {
        key = keyOct
        oct = 0
    }
    const Tonality = {
        'C': 0, 'G': 7, 'D': 2, 'A': 9, 'E': 4, 'B': -1, 'F': 5,
        '#F': 6, '#C': 1, 'bB': -2, 'bE': 3, 'bA': 8, 'bD': 1, 'bG': 6, 'bC': -1,
        'F#': 6, 'C#': 1, 'Bb': -2, 'Eb': 3, 'Ab': 8, 'Db': 1, 'Gb': 6, 'Cb': -1
    }
    this.Settings.assignSetting('Key', Tonality[key], (key) => Number.isInteger(key))
    this.Settings.assignSetting('Octave', oct, (octave) => Number.isInteger(octave))
}

Beat(beat) {
    this.Settings.assignSetting('Beat', beat, (beat) => beat > 0 && Number.isInteger(Math.log2(beat)))
}

Bar(bar) {
    this.Settings.assignSetting('Bar', bar, (bar) => bar > 0 && Number.isInteger(bar))
}

BarBeat(bar, beat) {
    /**** (!1/!2) ****/
    this.Settings.assignSetting('Bar', bar, (bar) => bar > 0 && Number.isInteger(bar))
    this.Settings.assignSetting('Beat', beat, (beat) => beat > 0 && Number.isInteger(Math.log2(beat)))
}

Dur(scale) {
    /**** (Dur:%1) ****/
    this.Settings.assignSetting('Duration', scale, () => true)
}

Acct(scale) {
    this.Settings.assignSetting('Accent', scale, (scale) => scale > 1)
}

Light(scale) {
    this.Settings.assignSetting('Light', scale, (scale) => scale < 1 && scale > 0)
}

Trace(count) {
    /**** (Trace:!1) ****/
    this.Settings.assignSetting('Trace', count, count > 0 && count <= 4 && Number.isInteger(count))
}

FadeIn(time) {
    /**** (FadeIn:!1) ****/
    this.Settings.assignSetting('FadeIn', time, (time) => time >= 0)
}

FadeOut(time) {
    /**** (FadeOut:!1) ****/
    this.Settings.assignSetting('FadeOut', time, (time) => time >= 0)
}

Rev(r) {
    /**** (Rev:!1) ****/
    this.Settings.assignSetting('Rev', r, () => true)
}

setVar(key, value) {
    this.Settings.Var[key] = value
}

getVar(key, defaultValue = null) {
    return this.Settings.Var[key] ? this.Var[key] : defaultValue
}

Stac(restProportion, index = 1) {
    /**** (Stac:%1) ****/
    if (typeof restProportion !== 'number') throw new TypeError('Non-numeric value passed in as Stac')
    if (!((restProportion) => restProportion >= 0 && restProportion <= 1)(restProportion)) throw new RangeError('Stac out of range')
    if (![0, 1, 2].indexOf(index)) throw new RangeError('Stac index out of range')
    this.Settings.Stac[index] = restProportion
}

# End
