//SMML Standard Package - GlobalSettings
//Updated: 2018.2.16.

# Function

ConOct(octave, volumeScale = 1) {
    if (octave === 0) {
        this.Settings.Key = [this.Settings.Key[0]]
    } else {
        this.Settings.Key = [this.Settings.Key[0], this.Settings.Key[0] + octave * 12]
    }
    // this.Settings.assignSetting('ConOct', octave, (octave) => Number.isInteger(octave))
    // this.Settings.assignSetting('ConOctVolume', volumeScale, (volume) => volume >= 0)
}

Vol(volume) {
    /**** (!1\%) ****/
    const delta = volume / this.Settings.Volume[0]
    for (var i = 0, length = this.Settings.Volume.length; i < length; i++) {
        this.Settings.Volume[i] *= delta
    }
    // this.Settings.assignSetting('Volume', volume / 100, (volume) => volume >= 0)}

Spd(speed) {
    /**** (!1) ****/
    this.Settings.assignSetting('Speed', speed, (speed) => speed > 0)
}

Key(key) {
    const delta = key - this.Settings.Key[0]
    for (var i = 0, length = this.Settings.Key.length; i < length; i++) {
        this.Settings.Key[i] += delta
    }
    // this.Settings.assignSetting('Key', key, (key) => Number.isInteger(key))
}

Oct(oct) {
    const delta = (oct - Math.floor((this.Settings.Key[0] + 2) / 12)) * 12
    for (var i = 0, length = this.Settings.Key.length; i < length; i++) {
        this.Settings.Key[i] += delta
    }
    // this.Settings.assignSetting('Octave', oct, (octave) => Number.isInteger(octave))
}

KeyOct(keyOct) {
    /**** (1=$1) ****/
    const match = keyOct.match(/^((#|b)\2*)?([A-G])(('|,)\5*)?/)
    const Tonality = {
        'C': 0,
        'G': 7,
        'D': 2,
        'A': 9,
        'E': 4,
        'B': -1,
        'F': 5
    }
    let delta = Tonality[match[3]] + (match[2] === undefined ? 0 : (match[2] === '#' ? match[1].length : -match[1].length))
        + (match[5] === undefined ? 0 : (match[5] === '\'' ? (12 * match[4].length) : (-12 * match[4].length))) - this.Settings.Key[0]
    for (var i = 0, length = this.Settings.Key.length; i < length; i++) {
        this.Settings.Key[i] += delta
    }
    // this.Settings.assignSetting('Key', Tonality[key], (key) => Number.isInteger(key))
    // this.Settings.assignSetting('Octave', oct, (octave) => Number.isInteger(octave))
}

Beat(beat) {
    this.Settings.assignSetting('Beat', beat, (beat) => beat > 0 && Number.isInteger(Math.log2(beat)))
}

Bar(bar) {
    this.Settings.assignSetting('Bar', bar, (bar) => bar > 0 && Number.isInteger(bar))
}

BarBeat(bar, beat) {
    /**** (!1/!2) ****/
    this.Settings.assignSetting('Bar', bar, (bar) => bar > 0 && Number.isInteger(bar))
    this.Settings.assignSetting('Beat', beat, (beat) => beat > 0 && Number.isInteger(Math.log2(beat)))
}

Dur(scale) {
    this.Settings.assignSetting('Duration', scale, () => true)
}

Acct(scale) {
    this.Settings.assignSetting('Accent', scale, (scale) => scale > 1)
}

Light(scale) {
    this.Settings.assignSetting('Light', scale, (scale) => scale < 1 && scale > 0)
}

Trace(count) {
    this.Settings.assignSetting('Trace', count, (count) => count > 0 && count <= 4 && Number.isInteger(count))
}

FadeIn(time) {
    this.Settings.assignSetting('FadeIn', time, (time) => time >= 0)
}

FadeOut(time) {
    this.Settings.assignSetting('FadeOut', time, (time) => time >= 0)
}

Rev(r) {
    this.Settings.assignSetting('Rev', r, () => true)
}

Stac(restProportion, index = 1) {
    if (typeof restProportion !== 'number') throw new TypeError('Non-numeric value passed in as Stac')
    if (!((restProportion) => restProportion >= 0 && restProportion <= 1)(restProportion)) throw new RangeError('Stac out of range')
    if (![0, 1, 2].includes(index)) throw new RangeError('Stac index out of range')
    this.Settings.Stac[index] = restProportion
}

# End
