// TM Ammonia Package
// Updated: 2018.4.3.

# Include ./ornament
# Include ./repeat

# Chord

M		Major			0, 4, 7
m		Minor			0, 3, 7
a		Augmented		0, 4, 8
d		Diminished		0, 3, 6
q		quattuor		[], 5
p		quinque			[], 7
o		octo			[], 12
u		octo (Under)	[-1]-12, []
i		1st inversion	[1:], [:0]+12
j		2nd inversion	[2:], [:1]+12

# Function

function Con(octave, scale = 1) {
    if (octave === 0) {
        this.Settings.Key = [this.Settings.Key[0]]
        this.Settings.Volume = [this.Settings.Volume[0]]
    } else {
        this.Settings.Key = [this.Settings.Key[0], this.Settings.Key[0] + octave * 12]
        this.Settings.Volume = [this.Settings.Volume[0], this.Settings.Volume[0] * scale]
    }
}

function Vol(volume) {
    // alias: (${0:uns}%)
    if (volume instanceof Array) {
        this.Settings.Volume = volume
    } else {
        const delta = (volume / 100) / this.Settings.Volume[0]
        for (var i = 0, length = this.Settings.Volume.length; i < length; i++) {
            this.Settings.Volume[i] *= delta
        }
    }
}

function Key(key) {
    // alias: (1=${0:str})
    let delta
    if (typeof key === 'string') {
        const match = arguments[0].match(/^((#|b)\2*)?([A-G])(('|,)\5*)?/)
        const Tonality = {
            'C': 0,
            'G': 7,
            'D': 2,
            'A': 9,
            'E': 4,
            'B': -1,
            'F': 5
        }
        delta = Tonality[match[3]] + (match[2] === undefined ? 0 : (match[2] === '#' ? match[1].length : -match[1].length)) +
                (match[5] === undefined ? 0 : (match[5] === '\'' ? (12 * match[4].length) : (-12 * match[4].length))) - this.Settings.Key[0]
    } else {
        delta = key - this.Settings.Key[0]
    }
    for (var i = 0, length = this.Settings.Key.length; i < length; i++) {
        this.Settings.Key[i] += delta
    }
        // this.Settings.assignSetting('Key', key, (key) => Number.isInteger(key))
}

function KeyShift(delta) {
    // alias: (${0:sig})
    for (var i = 0, length = this.Settings.Key.length; i < length; i++) {
        this.Settings.Key[i] += delta
    }
}

function Oct() {
    if (arguments.length === 0) return
    if (!(arguments[0] instanceof Array)) {
        const delta = (arguments[0] - Math.floor((this.Settings.Key[0] + 2) / 12)) * 12
        for (let i = 0, length = this.Settings.Key.length; i < length; i++) {
            this.Settings.Key[i] += delta
        }
    } else {
        const tonality = (this.Settings.Key[0] - 2) % 12
        this.Settings.Key = arguments[0].map((oct) => tonality + oct * 12)
        if (arguments.length >= 2) this.Settings.Volume = arguments[1]
    }
}

function Spd(speed) {
    // alias: (${0:uns})
    this.Settings.assignSetting('Speed', speed, (speed) => speed > 0);
}

function BarBeat(bar, beat) {
    // alias: (${0:uns}/${1:uns})
    this.Settings.assignSetting('Bar', bar, (bar) => bar > 0 && Number.isInteger(bar))
    this.Settings.assignSetting('Beat', beat, (beat) => beat > 0 && Number.isInteger(Math.log2(beat)))
}

function Dur(scale) {
    this.Settings.assignSetting('Duration', scale, () => true)
}

function Acct(scale) {
    this.Settings.assignSetting('Accent', scale, (scale) => scale > 1)
}

function Light(scale) {
    this.Settings.assignSetting('Light', scale, (scale) => scale < 1 && scale > 0)
}

function Trace(count) {
    this.Settings.assignSetting('Trace', count, (count) => count > 0 && count <= 4 && Number.isInteger(count))
}

function FadeIn(time) {
    this.Settings.assignSetting('FadeIn', time, (time) => time >= 0)
}

function FadeOut(time) {
    this.Settings.assignSetting('FadeOut', time, (time) => time >= 0)
}

function Rev(r) {
    this.Settings.assignSetting('Rev', r, () => true)
}

function Stac(rest, index = 1) {
    this.Settings.assignSettingAtIndex('Stac', index, rest, (rest) => rest >= 0 && rest <= 1)
}

# End
